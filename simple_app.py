import os
import json
import requests
import gradio as gr
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è DeepSeek API
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_MODEL = "deepseek-chat"

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "")

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ
FAQ_DATA = [
    {"question": "–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?", "answer": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–∏—Å—å–º–µ."},
    {"question": "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å email?", "answer": "–í–æ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' –∏ –æ–±–Ω–æ–≤–∏—Ç–µ email –∞–¥—Ä–µ—Å."},
    {"question": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?", "answer": "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ email support@example.com –∏–ª–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ."},
    {"question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?", "answer": "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, PayPal, Apple Pay –∏ Google Pay."},
    {"question": "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?", "answer": "–ó–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."}
]

def call_deepseek_api(question, context=""):
    """–í—ã–∑—ã–≤–∞–µ—Ç DeepSeek API"""
    if not DEEPSEEK_API_KEY:
        return "‚ùå API –∫–ª—é—á DeepSeek –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/"
    
    try:
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if context:
            prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"""
        else:
            prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
        
        data = {
            "model": DEEPSEEK_MODEL,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.3,
            "max_tokens": 1000
        }
        
        response = requests.post(DEEPSEEK_API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        return result["choices"][0]["message"]["content"]
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek API: {str(e)}"

def find_relevant_faq(question):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ FAQ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)"""
    question_lower = question.lower()
    relevant_faqs = []
    
    for faq in FAQ_DATA:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in question_lower for word in faq["question"].lower().split()):
            relevant_faqs.append(faq)
    
    return relevant_faqs

def get_response(question):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    if not question.strip():
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    
    # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ FAQ
    relevant_faqs = find_relevant_faq(question)
    
    if relevant_faqs:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ FAQ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n".join([f"–í: {faq['question']}\n–û: {faq['answer']}" for faq in relevant_faqs])
        answer = call_deepseek_api(question, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        answer = call_deepseek_api(question)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    log_interaction(question, answer)
    
    return answer

def log_interaction(question, answer):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"""
    log = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open("chat_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{log['timestamp']} | {question} | {answer}\n")

def chat_fn(message, history):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–∞"""
    if not message.strip():
        return history, ""
    
    answer = get_response(message)
    history.append((message, answer))
    return history, ""

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(title="RAG Support Bot - DeepSeek", theme=gr.themes.Soft()) as demo:
    gr.Markdown("# ü§ñ RAG Support Bot —Å DeepSeek API")
    
    with gr.Tab("üí¨ –ß–∞—Ç"):
        gr.Markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–Ω –Ω–∞–π–¥–µ—Ç –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
        chatbot = gr.Chatbot(label="–î–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", height=400)
        msg = gr.Textbox(label="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", placeholder="–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?")
        send = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
        send.click(chat_fn, inputs=[msg, chatbot], outputs=[chatbot, msg])
        msg.submit(chat_fn, inputs=[msg, chatbot], outputs=[chatbot, msg])

    with gr.Tab("üìö FAQ –±–∞–∑–∞"):
        gr.Markdown("–¢–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:")
        faq_text = ""
        for i, faq in enumerate(FAQ_DATA, 1):
            faq_text += f"{i}. **–í:** {faq['question']}\n   **–û:** {faq['answer']}\n\n"
        gr.Markdown(faq_text)

    with gr.Tab("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        gr.Markdown("### –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        gr.Markdown(f"**üîµ API –ü—Ä–æ–≤–∞–π–¥–µ—Ä:** DeepSeek")
        gr.Markdown(f"**–ú–æ–¥–µ–ª—å:** {DEEPSEEK_MODEL}")
        gr.Markdown(f"**API Key:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DEEPSEEK_API_KEY else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        gr.Markdown("### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
        gr.Markdown("""
        1. **–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á DeepSeek:**
           - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://platform.deepseek.com/
           - –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
           
        2. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
           ```bash
           set DEEPSEEK_API_KEY=–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å
           ```
           
        3. **–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env:**
           ```
           DEEPSEEK_API_KEY=–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å
           ```
        """)

if __name__ == "__main__":
    if not DEEPSEEK_API_KEY:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: set DEEPSEEK_API_KEY=your-key")
    else:
        print("‚úÖ DeepSeek API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    port = int(os.getenv("PORT", 7860))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ RAG Support Bot –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:{port}")
    demo.launch(server_name="0.0.0.0", server_port=port)
